#!/usr/bin/env python

Import('env')
Import('env_modules')

env_svg = env_modules.Clone()

# Thirdparty source files
thirdparty_dir = "#thirdparty/resonanceaudio/"
thirdparty_sources = [
  "resonance_audio/ambisonics/ambisonic_binaural_decoder.cc"
, "resonance_audio/ambisonics/ambisonic_lookup_table.cc"
, "resonance_audio/ambisonics/associated_legendre_polynomials_generator.cc"
, "resonance_audio/ambisonics/foa_rotator.cc"
, "resonance_audio/ambisonics/hoa_rotator.cc"
, "resonance_audio/ambisonics/stereo_from_soundfield_converter.cc"
, "resonance_audio/api/binaural_surround_renderer.cc"
, "resonance_audio/api/resonance_audio_api.cc"
, "resonance_audio/base/audio_buffer.cc"
, "resonance_audio/base/channel_view.cc"
, "resonance_audio/base/misc_math.cc"
, "resonance_audio/base/simd_utils.cc"
, "resonance_audio/base/spherical_angle.cc"
, "resonance_audio/config/source_config.cc"
, "resonance_audio/dsp/biquad_filter.cc"
, "resonance_audio/dsp/channel_converter.cc"
, "resonance_audio/dsp/circular_buffer.cc"
, "resonance_audio/dsp/delay_filter.cc"
, "resonance_audio/dsp/distance_attenuation.cc"
, "resonance_audio/dsp/fft_manager.cc"
, "resonance_audio/dsp/filter_coefficient_generators.cc"
, "resonance_audio/dsp/fir_filter.cc"
, "resonance_audio/dsp/gain.cc"
, "resonance_audio/dsp/gain_mixer.cc"
, "resonance_audio/dsp/gain_processor.cc"
, "resonance_audio/dsp/mixer.cc"
, "resonance_audio/dsp/mono_pole_filter.cc"
, "resonance_audio/dsp/multi_channel_iir.cc"
, "resonance_audio/dsp/near_field_processor.cc"
, "resonance_audio/dsp/occlusion_calculator.cc"
, "resonance_audio/dsp/partitioned_fft_filter.cc"
, "resonance_audio/dsp/reflections_processor.cc"
, "resonance_audio/dsp/resampler.cc"
, "resonance_audio/dsp/reverb_onset_compensator.cc"
, "resonance_audio/dsp/reverb_onset_update_processor.cc"
, "resonance_audio/dsp/sh_hrir_creator.cc"
, "resonance_audio/dsp/shoe_box_room.cc"
, "resonance_audio/dsp/spectral_reverb.cc"
, "resonance_audio/dsp/stereo_panner.cc"
, "resonance_audio/dsp/utils.cc"
, "resonance_audio/geometrical_acoustics/acoustic_ray.cc"
, "resonance_audio/geometrical_acoustics/collection_kernel.cc"
, "resonance_audio/geometrical_acoustics/estimating_rt60.cc"
, "resonance_audio/geometrical_acoustics/impulse_response_computer.cc"
, "resonance_audio/geometrical_acoustics/parallel_for.cc"
, "resonance_audio/geometrical_acoustics/path_tracer.cc"
, "resonance_audio/geometrical_acoustics/proxy_room_estimator.cc"
, "resonance_audio/geometrical_acoustics/reflection_kernel.cc"
, "resonance_audio/geometrical_acoustics/scene_manager.cc"
, "resonance_audio/geometrical_acoustics/sphere.cc"
, "resonance_audio/geometrical_acoustics/test_util.cc"
, "resonance_audio/graph/ambisonic_binaural_decoder_node.cc"
, "resonance_audio/graph/ambisonic_mixing_encoder_node.cc"
, "resonance_audio/graph/binaural_surround_renderer_impl.cc"
, "resonance_audio/graph/buffered_source_node.cc"
, "resonance_audio/graph/foa_rotator_node.cc"
, "resonance_audio/graph/gain_mixer_node.cc"
, "resonance_audio/graph/gain_node.cc"
, "resonance_audio/graph/graph_manager.cc"
, "resonance_audio/graph/hoa_rotator_node.cc"
, "resonance_audio/graph/mixer_node.cc"
, "resonance_audio/graph/mono_from_soundfield_node.cc"
, "resonance_audio/graph/near_field_effect_node.cc"
, "resonance_audio/graph/occlusion_node.cc"
, "resonance_audio/graph/reflections_node.cc"
, "resonance_audio/graph/resonance_audio_api_impl.cc"
, "resonance_audio/graph/reverb_node.cc"
, "resonance_audio/graph/source_parameters_manager.cc"
, "resonance_audio/graph/stereo_mixing_panner_node.cc"
, "resonance_audio/node/processing_node.cc"
, "resonance_audio/node/sink_node.cc"
, "resonance_audio/node/source_node.cc"
, "resonance_audio/utils/buffer_crossfader.cc"
, "resonance_audio/utils/buffer_partitioner.cc"
, "resonance_audio/utils/buffer_unpartitioner.cc"
, "resonance_audio/utils/lockless_task_queue.cc"
, "resonance_audio/utils/ogg_vorbis_recorder.cc"
, "resonance_audio/utils/planar_interleaved_conversion.cc"
, "resonance_audio/utils/sample_type_conversion.cc"
, "resonance_audio/utils/sum_and_difference_processor.cc"
, "resonance_audio/utils/task_thread_pool.cc"
, "resonance_audio/utils/test_util.cc"
, "resonance_audio/utils/vorbis_stream_encoder.cc"
, "resonance_audio/utils/wav.cc"
, "resonance_audio/utils/wav_reader.cc"
, "third_party/SADIE_hrtf_database/generated/hrtf_assets.cc"
, "pffft/bench_pffft.c"
, "pffft/fftpack.c"
, "pffft/pffastconv.c"
, "pffft/pffft.c"
, "pffft/pffft_common.c"
, "pffft/pffft_double.c"


]
thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

env_svg.Prepend(CPPPATH=[thirdparty_dir, thirdparty_dir + "resonance_audio", thirdparty_dir + "eigen", thirdparty_dir + "pffft"])
# FIXME: Needed in editor/editor_themes.cpp for now, but ideally there
# shouldn't be a dependency on modules/ and its own 3rd party deps.
env.Prepend(CPPPATH=[thirdparty_dir])
env.Append(CPPDEFINES=["SVG_ENABLED"])

env_thirdparty = env_svg.Clone()
env_thirdparty.disable_warnings()
env_thirdparty.add_source_files(env.modules_sources, thirdparty_sources)

# Godot's own source files
env_svg.add_source_files(env.modules_sources, "*.cpp")
